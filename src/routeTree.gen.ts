/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LivetrackFleetFleetIdRouteImport } from './routes/livetrack/fleet.$fleetId'
import { ServerRoute as ApiRouteRouteIdServerRouteImport } from './routes/api/route.$routeId'
import { ServerRoute as ApiStopStopIdExternalStopDataServerRouteImport } from './routes/api/stop.$stopId.externalStopData'
import { ServerRoute as ApiFuzzyStopSearchSlugServerRouteImport } from './routes/api/fuzzy.stop.$searchSlug'
import { ServerRoute as ApiFleetFleetIdExternalLiveTrackServerRouteImport } from './routes/api/fleet.$fleetId.externalLiveTrack'
import { ServerRoute as ApiRouteRouteIdTripsServerRouteImport } from './routes/api/route.$routeId.trips'
import { ServerRoute as ApiFuzzyRouteSearchSlugServerRouteImport } from './routes/api/fuzzy.route.$searchSlug'

const rootServerRouteImport = createServerRootRoute()

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const LivetrackFleetFleetIdRoute = LivetrackFleetFleetIdRouteImport.update({
  id: '/livetrack/fleet/$fleetId',
  path: '/livetrack/fleet/$fleetId',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiRouteRouteIdServerRoute = ApiRouteRouteIdServerRouteImport.update({
  id: '/api/route/$routeId',
  path: '/api/route/$routeId',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiStopStopIdExternalStopDataServerRoute =
  ApiStopStopIdExternalStopDataServerRouteImport.update({
    id: '/api/stop/$stopId/externalStopData',
    path: '/api/stop/$stopId/externalStopData',
    getParentRoute: () => rootServerRouteImport,
  } as any)
const ApiFuzzyStopSearchSlugServerRoute =
  ApiFuzzyStopSearchSlugServerRouteImport.update({
    id: '/api/fuzzy/stop/$searchSlug',
    path: '/api/fuzzy/stop/$searchSlug',
    getParentRoute: () => rootServerRouteImport,
  } as any)
const ApiFleetFleetIdExternalLiveTrackServerRoute =
  ApiFleetFleetIdExternalLiveTrackServerRouteImport.update({
    id: '/api/fleet/$fleetId/externalLiveTrack',
    path: '/api/fleet/$fleetId/externalLiveTrack',
    getParentRoute: () => rootServerRouteImport,
  } as any)
const ApiRouteRouteIdTripsServerRoute =
  ApiRouteRouteIdTripsServerRouteImport.update({
    id: '/trips',
    path: '/trips',
    getParentRoute: () => ApiRouteRouteIdServerRoute,
  } as any)
const ApiFuzzyRouteSearchSlugServerRoute =
  ApiFuzzyRouteSearchSlugServerRouteImport.update({
    id: '/api/fuzzy/route/$searchSlug',
    path: '/api/fuzzy/route/$searchSlug',
    getParentRoute: () => rootServerRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/livetrack/fleet/$fleetId': typeof LivetrackFleetFleetIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/livetrack/fleet/$fleetId': typeof LivetrackFleetFleetIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/livetrack/fleet/$fleetId': typeof LivetrackFleetFleetIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/livetrack/fleet/$fleetId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/livetrack/fleet/$fleetId'
  id: '__root__' | '/' | '/livetrack/fleet/$fleetId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LivetrackFleetFleetIdRoute: typeof LivetrackFleetFleetIdRoute
}
export interface FileServerRoutesByFullPath {
  '/api/route/$routeId': typeof ApiRouteRouteIdServerRouteWithChildren
  '/api/fuzzy/route/$searchSlug': typeof ApiFuzzyRouteSearchSlugServerRoute
  '/api/route/$routeId/trips': typeof ApiRouteRouteIdTripsServerRoute
  '/api/fleet/$fleetId/externalLiveTrack': typeof ApiFleetFleetIdExternalLiveTrackServerRoute
  '/api/fuzzy/stop/$searchSlug': typeof ApiFuzzyStopSearchSlugServerRoute
  '/api/stop/$stopId/externalStopData': typeof ApiStopStopIdExternalStopDataServerRoute
}
export interface FileServerRoutesByTo {
  '/api/route/$routeId': typeof ApiRouteRouteIdServerRouteWithChildren
  '/api/fuzzy/route/$searchSlug': typeof ApiFuzzyRouteSearchSlugServerRoute
  '/api/route/$routeId/trips': typeof ApiRouteRouteIdTripsServerRoute
  '/api/fleet/$fleetId/externalLiveTrack': typeof ApiFleetFleetIdExternalLiveTrackServerRoute
  '/api/fuzzy/stop/$searchSlug': typeof ApiFuzzyStopSearchSlugServerRoute
  '/api/stop/$stopId/externalStopData': typeof ApiStopStopIdExternalStopDataServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/route/$routeId': typeof ApiRouteRouteIdServerRouteWithChildren
  '/api/fuzzy/route/$searchSlug': typeof ApiFuzzyRouteSearchSlugServerRoute
  '/api/route/$routeId/trips': typeof ApiRouteRouteIdTripsServerRoute
  '/api/fleet/$fleetId/externalLiveTrack': typeof ApiFleetFleetIdExternalLiveTrackServerRoute
  '/api/fuzzy/stop/$searchSlug': typeof ApiFuzzyStopSearchSlugServerRoute
  '/api/stop/$stopId/externalStopData': typeof ApiStopStopIdExternalStopDataServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths:
    | '/api/route/$routeId'
    | '/api/fuzzy/route/$searchSlug'
    | '/api/route/$routeId/trips'
    | '/api/fleet/$fleetId/externalLiveTrack'
    | '/api/fuzzy/stop/$searchSlug'
    | '/api/stop/$stopId/externalStopData'
  fileServerRoutesByTo: FileServerRoutesByTo
  to:
    | '/api/route/$routeId'
    | '/api/fuzzy/route/$searchSlug'
    | '/api/route/$routeId/trips'
    | '/api/fleet/$fleetId/externalLiveTrack'
    | '/api/fuzzy/stop/$searchSlug'
    | '/api/stop/$stopId/externalStopData'
  id:
    | '__root__'
    | '/api/route/$routeId'
    | '/api/fuzzy/route/$searchSlug'
    | '/api/route/$routeId/trips'
    | '/api/fleet/$fleetId/externalLiveTrack'
    | '/api/fuzzy/stop/$searchSlug'
    | '/api/stop/$stopId/externalStopData'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiRouteRouteIdServerRoute: typeof ApiRouteRouteIdServerRouteWithChildren
  ApiFuzzyRouteSearchSlugServerRoute: typeof ApiFuzzyRouteSearchSlugServerRoute
  ApiFleetFleetIdExternalLiveTrackServerRoute: typeof ApiFleetFleetIdExternalLiveTrackServerRoute
  ApiFuzzyStopSearchSlugServerRoute: typeof ApiFuzzyStopSearchSlugServerRoute
  ApiStopStopIdExternalStopDataServerRoute: typeof ApiStopStopIdExternalStopDataServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/livetrack/fleet/$fleetId': {
      id: '/livetrack/fleet/$fleetId'
      path: '/livetrack/fleet/$fleetId'
      fullPath: '/livetrack/fleet/$fleetId'
      preLoaderRoute: typeof LivetrackFleetFleetIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/route/$routeId': {
      id: '/api/route/$routeId'
      path: '/api/route/$routeId'
      fullPath: '/api/route/$routeId'
      preLoaderRoute: typeof ApiRouteRouteIdServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/stop/$stopId/externalStopData': {
      id: '/api/stop/$stopId/externalStopData'
      path: '/api/stop/$stopId/externalStopData'
      fullPath: '/api/stop/$stopId/externalStopData'
      preLoaderRoute: typeof ApiStopStopIdExternalStopDataServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/fuzzy/stop/$searchSlug': {
      id: '/api/fuzzy/stop/$searchSlug'
      path: '/api/fuzzy/stop/$searchSlug'
      fullPath: '/api/fuzzy/stop/$searchSlug'
      preLoaderRoute: typeof ApiFuzzyStopSearchSlugServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/fleet/$fleetId/externalLiveTrack': {
      id: '/api/fleet/$fleetId/externalLiveTrack'
      path: '/api/fleet/$fleetId/externalLiveTrack'
      fullPath: '/api/fleet/$fleetId/externalLiveTrack'
      preLoaderRoute: typeof ApiFleetFleetIdExternalLiveTrackServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/route/$routeId/trips': {
      id: '/api/route/$routeId/trips'
      path: '/trips'
      fullPath: '/api/route/$routeId/trips'
      preLoaderRoute: typeof ApiRouteRouteIdTripsServerRouteImport
      parentRoute: typeof ApiRouteRouteIdServerRoute
    }
    '/api/fuzzy/route/$searchSlug': {
      id: '/api/fuzzy/route/$searchSlug'
      path: '/api/fuzzy/route/$searchSlug'
      fullPath: '/api/fuzzy/route/$searchSlug'
      preLoaderRoute: typeof ApiFuzzyRouteSearchSlugServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface ApiRouteRouteIdServerRouteChildren {
  ApiRouteRouteIdTripsServerRoute: typeof ApiRouteRouteIdTripsServerRoute
}

const ApiRouteRouteIdServerRouteChildren: ApiRouteRouteIdServerRouteChildren = {
  ApiRouteRouteIdTripsServerRoute: ApiRouteRouteIdTripsServerRoute,
}

const ApiRouteRouteIdServerRouteWithChildren =
  ApiRouteRouteIdServerRoute._addFileChildren(
    ApiRouteRouteIdServerRouteChildren,
  )

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LivetrackFleetFleetIdRoute: LivetrackFleetFleetIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiRouteRouteIdServerRoute: ApiRouteRouteIdServerRouteWithChildren,
  ApiFuzzyRouteSearchSlugServerRoute: ApiFuzzyRouteSearchSlugServerRoute,
  ApiFleetFleetIdExternalLiveTrackServerRoute:
    ApiFleetFleetIdExternalLiveTrackServerRoute,
  ApiFuzzyStopSearchSlugServerRoute: ApiFuzzyStopSearchSlugServerRoute,
  ApiStopStopIdExternalStopDataServerRoute:
    ApiStopStopIdExternalStopDataServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
