import { create } from "zustand"
import { devtools } from "zustand/middleware"
import type { SearchResults } from "../types"

/**
 * Search Store using Zustand
 *
 * TODO: Implement your search state management
 * This store should handle search queries, results, and UI state
 */

interface SearchState {
  // Search state
  query: string
  results: SearchResults
  isLoading: boolean
  error: string | null

  // UI state
  busRoutesExpanded: boolean
  busStopsExpanded: boolean
  expandedBuses: Set<string>
  expandedStops: Set<string>

  // Actions
  setQuery: (query: string) => void
  setResults: (results: SearchResults) => void
  setLoading: (loading: boolean) => void
  setError: (error: string | null) => void
  toggleBusRoutesExpanded: () => void
  toggleBusStopsExpanded: () => void
  toggleBusExpansion: (busId: string) => void
  toggleStopExpansion: (stopId: string) => void
  resetExpansionStates: () => void
}

export const useSearchStore = create<SearchState>()(
  devtools(
    (set, get) => ({
      // Initial state
      query: "",
      results: { buses: [], stops: [] },
      isLoading: false,
      error: null,
      busRoutesExpanded: true,
      busStopsExpanded: true,
      expandedBuses: new Set(),
      expandedStops: new Set(),

      // Actions
      setQuery: (query) => set({ query }),
      setResults: (results) => set({ results }),
      setLoading: (isLoading) => set({ isLoading }),
      setError: (error) => set({ error }),

      toggleBusRoutesExpanded: () => set((state) => ({ busRoutesExpanded: !state.busRoutesExpanded })),

      toggleBusStopsExpanded: () => set((state) => ({ busStopsExpanded: !state.busStopsExpanded })),

      toggleBusExpansion: (busId) =>
        set((state) => {
          const newExpanded = new Set(state.expandedBuses)
          if (newExpanded.has(busId)) {
            newExpanded.delete(busId)
          } else {
            newExpanded.add(busId)
          }
          return { expandedBuses: newExpanded }
        }),

      toggleStopExpansion: (stopId) =>
        set((state) => {
          const newExpanded = new Set(state.expandedStops)
          if (newExpanded.has(stopId)) {
            newExpanded.delete(stopId)
          } else {
            newExpanded.add(stopId)
          }
          return { expandedStops: newExpanded }
        }),

      resetExpansionStates: () =>
        set({
          expandedBuses: new Set(),
          expandedStops: new Set(),
          busRoutesExpanded: true,
          busStopsExpanded: true,
        }),
    }),
    { name: "search-store" },
  ),
)
